import { createAsyncThunk, createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';
import { toast } from 'react-toastify';
import { LoginDto } from '../../app/models/dto';
import { User } from '../../app/models/user';
import agent from '../../app/api/agent';
import history from '../../app/historyApi';
import { setBasket } from '../basket/basketSlice';

export interface UserState {
    user: User | null;
    status: 'idle' | 'loading' | 'failed';
}

export const signInUser = createAsyncThunk<User, LoginDto>('account/signInUser', async (data, thunkAPI) => {
    try {
        const userDto = await agent.Account.login(data);
        const { basket, ...user } = userDto;
        if (basket) thunkAPI.dispatch(setBasket(basket));
        localStorage.setItem('user', JSON.stringify(user));
        return user;
    } catch (error: any) {
        return thunkAPI.rejectWithValue({ error: error.data });
    }
});

export const fetchCurrentUser = createAsyncThunk<User>(
    'account/fetchCurrentUser',
    async (_, thunkAPI) => {
        thunkAPI.dispatch(setUser(JSON.parse(localStorage.getItem('user')!)));
        try {
            const userDto = await agent.Account.currentUser();
            const { basket, ...user } = userDto;
            if (basket) thunkAPI.dispatch(setBasket(basket));
            localStorage.setItem('user', JSON.stringify(user));
            return user;
        } catch (error: any) {
            return thunkAPI.rejectWithValue({ error: error.data });
        }
    },
    {
        condition: () => {
            if (!localStorage.getItem('user')) return false;
        }
    }
);

const initialState: UserState = {
    user: null,
    status: 'idle'
};

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        signOut: (state) => {
            state.user = null;
            localStorage.removeItem('user');
            history.push('/');
        },
        setUser: (state, action: PayloadAction<User>) => {
            let claims = JSON.parse(atob(action.payload.token.split('.')[1]));
            let roles = claims['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];
            state.user = {
                ...action.payload,
                roles: typeof roles === 'string' ? [roles] : roles
            };
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder.addCase(fetchCurrentUser.rejected, (state) => {
            state.user = null;
            localStorage.removeItem('user');
            toast.error('Session expired - please login again');
            history.push('/');
        });
        builder.addMatcher(isAnyOf(signInUser.fulfilled, fetchCurrentUser.fulfilled), (state, action) => {
            let claims = JSON.parse(atob(action.payload.token.split('.')[1]));
            let roles = claims['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];
            state.user = {
                ...action.payload,
                roles: typeof roles === 'string' ? [roles] : roles
            };
        });
        builder.addMatcher(isAnyOf(signInUser.rejected), (state, action) => {
            throw action.payload;
        });
    }
});

export const { signOut, setUser } = userSlice.actions;

export default userSlice.reducer;
